import { IFactionLoreData } from './iFactionLoreData';

export class AlvacaLoreData implements IFactionLoreData {
  factionName: string;
  factionTicker: string;
  factionDescription: string;

  constructor() {
    this.factionName = 'Alvaca';
    this.factionTicker = '[AV.]';
    this.factionDescription = atob(this.rawDescription()).trim();
  }

  private rawDescription = () => {
    return '';
  };
}
